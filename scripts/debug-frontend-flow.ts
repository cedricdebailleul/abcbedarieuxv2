import { prisma } from "@/lib/prisma";
import { createPostAction } from "@/actions/post";
import { triggerPostCreationBadges } from "@/lib/services/badge-trigger-service";

async function debugFrontendFlow() {
  console.log("üé≠ Debug du flux frontend complet...\n");

  // R√©cup√©rer l'utilisateur avec 1 article pour pouvoir d√©clencher le badge "Auteur r√©gulier" √† 5 articles
  const usersWithOnePost = await prisma.post.groupBy({
    by: ["authorId"],
    _count: {
      id: true,
    },
    having: {
      id: {
        _count: {
          equals: 1,
        },
      },
    },
  });

  if (usersWithOnePost.length === 0) {
    console.log("‚ùå Aucun utilisateur avec exactement 1 article trouv√©");
    // Cr√©ons un utilisateur de test
    console.log("üîß Cr√©ation d'un utilisateur de test...");

    const testUser = await prisma.user.create({
      data: {
        email: `test-badge-${Date.now()}@example.com`,
        name: "Test Badge User",
        emailVerified: true,
        role: "user",
      },
    });

    // Cr√©er 4 articles pour cet utilisateur
    console.log("üìù Cr√©ation de 4 articles pour atteindre le seuil de 5...");
    for (let i = 1; i <= 4; i++) {
      await prisma.post.create({
        data: {
          title: `Article pr√©paratoire ${i}`,
          slug: `prep-article-${i}-${Date.now()}`,
          content: `Contenu de l'article pr√©paratoire ${i}`,
          excerpt: `Extrait ${i}`,
          authorId: testUser.id,
          published: true,
          status: "PUBLISHED",
          publishedAt: new Date(),
        },
      });
    }

    console.log(`‚úÖ Utilisateur de test cr√©√© avec 4 articles`);

    // Maintenant simuler createPostAction pour le 5√®me article
    console.log(`\nüéØ Simulation de createPostAction pour le 5√®me article...`);

    const articleData = {
      title: "Article test pour d√©clencher badge",
      slug: `badge-trigger-${Date.now()}`,
      content: "Contenu de test pour d√©clencher le badge Auteur r√©gulier",
      excerpt: "Test badge",
      published: true,
      status: "PUBLISHED" as const,
      tagIds: [] as string[],
    };

    // Simuler une session utilisateur pour createPostAction
    // Note: On ne peut pas vraiment tester createPostAction ici car elle n√©cessite une session auth
    // Mais on peut tester directement avec BadgeSystem

    const { BadgeSystem } = await import("@/lib/badge-system");

    // Cr√©er l'article manuellement
    const newPost = await prisma.post.create({
      data: {
        ...articleData,
        authorId: testUser.id,
        publishedAt: new Date(),
      },
    });

    console.log(`‚úÖ 5√®me article cr√©√© avec l'ID: ${newPost.id}`);

    // Tester le nouveau syst√®me de badges
    console.log(`\nüß™ Test du syst√®me de badges...`);
    
    console.log(`üîÑ D√©clenchement des badges pour le post...`);
    await triggerPostCreationBadges(testUser.id, newPost.id);
    
    // R√©cup√©rer les badges de l'utilisateur pour v√©rifier
    const userBadges = await prisma.userBadge.findMany({
      where: { userId: testUser.id },
      include: {
        badge: true
      },
      orderBy: { earnedAt: 'desc' },
      take: 5 // Les 5 derniers badges
    });

    console.log(
      `üì§ Badges obtenus:`,
      JSON.stringify(userBadges.map(ub => ({ 
        title: ub.badge.title, 
        reason: ub.reason,
        earnedAt: ub.earnedAt 
      })), null, 2)
    );

    if (userBadges.length > 0) {
      console.log(
        `\nüéâ SUCCESS! L'utilisateur a maintenant ${userBadges.length} badge(s):`
      );
      userBadges.forEach((userBadge, index) => {
        console.log(
          `  ${index + 1}. ${userBadge.badge.title} (${userBadge.badge.rarity})`
        );
        console.log(`     Description: ${userBadge.badge.description}`);
        console.log(`     Raison: ${userBadge.reason || 'Non sp√©cifi√©e'}`);
        console.log(`     Structure compl√®te pour frontend:`, {
          badge: {
            title: userBadge.badge.title,
            description: userBadge.badge.description,
            iconUrl: userBadge.badge.iconUrl,
            color: userBadge.badge.color,
            rarity: userBadge.badge.rarity
          },
          reason: userBadge.reason || 'Non sp√©cifi√©e',
        });
      });

      console.log(`\nüí° La popup devrait s'afficher avec ces donn√©es !`);
      console.log(`\nüîß Format attendu par BadgeCelebration component:`);
      console.log(`   - isOpen: true`);
      console.log(`   - badge: { title, description, iconUrl, color, rarity }`);
      console.log(`   - reason: string`);
      console.log(`   - onClose: function`);
    } else {
      console.log(`‚ùå Aucun badge retourn√© - probl√®me dans la logique`);
    }

    // Nettoyer
    console.log(`\nüßπ Nettoyage...`);
    await prisma.post.deleteMany({
      where: { authorId: testUser.id },
    });
    await prisma.userBadge.deleteMany({
      where: { userId: testUser.id },
    });
    await prisma.user.delete({
      where: { id: testUser.id },
    });
    console.log(`‚úÖ Donn√©es de test nettoy√©es`);
  } else {
    console.log(
      `üë§ Utilisateur trouv√© avec 1 article, simulation impossible pour √©viter de perturber les vraies donn√©es`
    );
  }

  console.log("\nüéØ Debug termin√© !");
}

debugFrontendFlow()
  .catch((error) => {
    console.error("Erreur:", error);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
