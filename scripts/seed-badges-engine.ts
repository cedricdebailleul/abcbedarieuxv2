#!/usr/bin/env tsx

import { BadgeCategory, BadgeRarity, PrismaClient } from "@/lib/generated/prisma";

const prisma = new PrismaClient();

// Badges bas√©s sur les configurations de l'engine
const badges = [
  // BEGINNER BADGES
  {
    id: "welcome",
    title: "Bienvenue !",
    description: "Premier pas sur ABC B√©darieux",
    iconUrl: "üëã",
    color: "#22c55e",
    category: BadgeCategory.GENERAL,
    rarity: BadgeRarity.COMMON,
  },
  {
    id: "first_place",
    title: "Premier lieu",
    description: "Premi√®re place ajout√©e sur la plateforme",
    iconUrl: "üè™",
    color: "#3b82f6",
    category: BadgeCategory.GENERAL,
    rarity: BadgeRarity.COMMON,
  },
  {
    id: "profile_complete",
    title: "Profil compl√©t√©",
    description: "Profil utilisateur enti√®rement renseign√©",
    iconUrl: "‚úÖ",
    color: "#10b981",
    category: BadgeCategory.GENERAL,
    rarity: BadgeRarity.COMMON,
  },

  // PLACE CONTRIBUTION BADGES
  {
    id: "explorer",
    title: "Explorateur",
    description: "A ajout√© 3 lieux sur la plateforme",
    iconUrl: "üß≠",
    color: "#f59e0b",
    category: BadgeCategory.ACHIEVEMENT,
    rarity: BadgeRarity.UNCOMMON,
  },
  {
    id: "active_contributor",
    title: "Contributeur actif",
    description: "A ajout√© 5 lieux sur la plateforme",
    iconUrl: "üèõÔ∏è",
    color: "#8b5cf6",
    category: BadgeCategory.ACHIEVEMENT,
    rarity: BadgeRarity.RARE,
  },

  // WRITING BADGES
  {
    id: "regular_author",
    title: "Auteur r√©gulier",
    description: "A publi√© 5 articles",
    iconUrl: "‚úçÔ∏è",
    color: "#06b6d4",
    category: BadgeCategory.ACHIEVEMENT,
    rarity: BadgeRarity.UNCOMMON,
  },
  {
    id: "prolific_writer",
    title: "R√©dacteur prolifique",
    description: "A publi√© 10 articles",
    iconUrl: "üìù",
    color: "#ec4899",
    category: BadgeCategory.ACHIEVEMENT,
    rarity: BadgeRarity.RARE,
  },
  {
    id: "master_writer",
    title: "Ma√Ætre √©crivain",
    description: "A publi√© 25 articles",
    iconUrl: "üìö",
    color: "#f97316",
    category: BadgeCategory.ACHIEVEMENT,
    rarity: BadgeRarity.EPIC,
  },

  // ENGAGEMENT BADGES
  {
    id: "ambassador",
    title: "Ambassadeur",
    description: "Profil public avec r√©seaux sociaux",
    iconUrl: "üåü",
    color: "#84cc16",
    category: BadgeCategory.GENERAL,
    rarity: BadgeRarity.UNCOMMON,
  },

  // TIME-BASED BADGES
  {
    id: "faithful_member",
    title: "Membre fid√®le",
    description: "Membre depuis plus de 3 mois",
    iconUrl: "‚ù§Ô∏è",
    color: "#ef4444",
    category: BadgeCategory.ANNIVERSARY,
    rarity: BadgeRarity.UNCOMMON,
  },
  {
    id: "veteran",
    title: "V√©t√©ran",
    description: "Membre depuis plus d'un an",
    iconUrl: "üéñÔ∏è",
    color: "#dc2626",
    category: BadgeCategory.ANNIVERSARY,
    rarity: BadgeRarity.RARE,
  },

  // SPECIAL BADGES
  {
    id: "bedarieux_native",
    title: "B√©darieux native",
    description: "R√©sident authentique de B√©darieux",
    iconUrl: "üèòÔ∏è",
    color: "#7c3aed",
    category: BadgeCategory.SPECIAL,
    rarity: BadgeRarity.EPIC,
  },
  {
    id: "pioneer",
    title: "Pionnier",
    description: "Parmi les 100 premiers membres",
    iconUrl: "üöÄ",
    color: "#fbbf24",
    category: BadgeCategory.SPECIAL,
    rarity: BadgeRarity.LEGENDARY,
  },
];

async function seedBadges() {
  console.log("üå± Cr√©ation des badges bas√©s sur l'engine...");

  try {
    // Supprimer les badges existants
    await prisma.userBadge.deleteMany({});
    await prisma.badge.deleteMany({});
    console.log("üóëÔ∏è Badges existants supprim√©s");

    // Cr√©er les nouveaux badges
    for (const badge of badges) {
      await prisma.badge.create({
        data: badge,
      });
      console.log(`‚úÖ Badge cr√©√©: ${badge.title}`);
    }

    console.log("üéâ Tous les badges ont √©t√© cr√©√©s avec succ√®s!");

    // Afficher un r√©sum√© par cat√©gorie et raret√©
    const summary: Record<string, number> = {};
    badges.forEach((badge) => {
      const key = `${badge.category} - ${badge.rarity}`;
      summary[key] = (summary[key] || 0) + 1;
    });

    console.log("\nüìä R√©sum√©:");
    Object.entries(summary).forEach(([key, count]) => {
      console.log(`  ${key}: ${count}`);
    });
    
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation des badges:", error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le seed
seedBadges();