import { NextResponse } from "next/server";
import { auth } from "@/lib/auth";
import { headers } from "next/headers";
import { prisma } from "@/lib/prisma";
import { exec } from "node:child_process";
import { promisify } from "node:util";
import { mkdir, writeFile } from "node:fs/promises";
import { join } from "node:path";
import { generateAPICompleteSQLDump } from "@/lib/sql-backup-generator";

const execAsync = promisify(exec);

// API pour cr√©er un dump PostgreSQL de la base de donn√©es
export async function POST() {
  try {
    // V√©rifier l'authentification et les permissions admin
    const headersList = await headers();
    const session = await auth.api.getSession({
      headers: headersList
    });

    if (!session?.user) {
      return NextResponse.json({ error: "Non authentifi√©" }, { status: 401 });
    }

    // V√©rifier si l'utilisateur est admin
    const user = await prisma.user.findUnique({
      where: { id: session.user.id },
      select: { role: true }
    });

    if (!user || user.role !== "admin") {
      return NextResponse.json({ error: "Permissions insuffisantes - admin requis" }, { status: 403 });
    }

    const timestamp = new Date().toISOString();
    const dateStr = timestamp.split('T')[0];
    const timeStr = timestamp.split('T')[1].split('.')[0].replace(/:/g, '-');
    
    console.log("üóÑÔ∏è D√©but de la sauvegarde PostgreSQL...");

    // Cr√©er le dossier de sauvegarde
    const backupDir = join(process.cwd(), "backups", "database", dateStr);
    await mkdir(backupDir, { recursive: true });

    // Extraire les informations de connexion depuis DATABASE_URL
    const databaseUrl = process.env.DATABASE_URL;
    if (!databaseUrl) {
      return NextResponse.json({ error: "DATABASE_URL non configur√©e" }, { status: 500 });
    }

    // Parser l'URL de base de donn√©es
    const dbUrl = new URL(databaseUrl);
    const dbConfig = {
      host: dbUrl.hostname,
      port: dbUrl.port || "5432",
      database: dbUrl.pathname.slice(1), // Enlever le "/" initial
      username: dbUrl.username,
      password: dbUrl.password
    };

    // Nom du fichier de dump
    const dumpFileName = `abc-bedarieux-db-dump-${dateStr}-${timeStr}.sql`;
    const dumpPath = join(backupDir, dumpFileName);

    // Commande pg_dump
    const pgDumpCmd = [
      "pg_dump",
      `--host=${dbConfig.host}`,
      `--port=${dbConfig.port}`,
      `--username=${dbConfig.username}`,
      `--dbname=${dbConfig.database}`,
      "--no-password", // Utiliser PGPASSWORD
      "--verbose",
      "--clean", // Inclure les commandes DROP
      "--if-exists", // √âviter les erreurs si les objets n'existent pas
      "--create", // Inclure la cr√©ation de la base
      `--file=${dumpPath}`,
      "--encoding=UTF8"
    ].join(" ");

    console.log("üîÑ Tentative pg_dump...");

    let usedPgDump = false;
    let dbStats: Record<string, number | string> = {};
    
    try {
      // D√©finir le mot de passe PostgreSQL via variable d'environnement
      const env = {
        ...process.env,
        PGPASSWORD: dbConfig.password
      };

      const { stderr } = await execAsync(pgDumpCmd, { 
        env,
        timeout: 300000 // 5 minutes de timeout
      });

      console.log("‚úÖ pg_dump termin√© avec succ√®s");
      if (stderr) {
        console.log("‚ÑπÔ∏è Avertissements pg_dump:", stderr);
      }
      usedPgDump = true;

    } catch (pgError) {
      console.error("‚ùå Erreur pg_dump:", pgError);
      
      // Fallback: G√©n√©rer un vrai dump SQL COMPLET avec Prisma
      console.log("üîÑ G√©n√©ration SQL COMPL√àTE avec Prisma (pas de pg_dump)...");
      
      try {
        // Cr√©er le dossier parent s'il n'existe pas
        await mkdir(backupDir, { recursive: true });
        console.log(`üìÅ Dossier backup: ${backupDir}`);
        console.log(`üéØ Fichier SQL cible: ${dumpPath}`);
        
        dbStats = await generateAPICompleteSQLDump(dumpPath, prisma);
        console.log("‚úÖ Dump SQL Prisma COMPLET g√©n√©r√© avec succ√®s");
        console.log(`üìä ${dbStats.totalRecords} enregistrements dans ${Object.keys(dbStats).length - 1} tables`);
        usedPgDump = false;
      } catch (sqlError) {
        console.error("‚ùå Erreur g√©n√©ration SQL Prisma:", sqlError);
        
        // Dernier recours: fichier d'instructions simple
        const instructionScript = `-- ‚ö†Ô∏è √âCHEC G√âN√âRATION SQL AUTOMATIQUE
-- Date: ${timestamp}
-- Raisons: pg_dump indisponible ET erreur g√©n√©ration Prisma

-- üöÄ SOLUTIONS ALTERNATIVES:

-- 1Ô∏è‚É£ UTILISER LA SAUVEGARDE JSON (RECOMMAND√â)
-- - Aller sur l'interface admin (/dashboard/admin/export)
-- - T√©l√©charger la sauvegarde JSON compl√®te
-- - Plus fiable que SQL pour cette application

-- 2Ô∏è‚É£ ESSAYER LA COMMANDE DIRECTE
-- pnpm backup:sql-complete

-- 3Ô∏è‚É£ INSTALLER POSTGRESQL COMPLET
-- - Installer PostgreSQL avec pg_dump
-- - Relancer cette sauvegarde

-- 4Ô∏è‚É£ RESTAURATION MANUELLE
-- - createdb abc_bedarieux_new
-- - pnpm db:push (applique sch√©ma Prisma)
-- - Utiliser interface admin pour restaurer JSON

-- Erreurs rencontr√©es:
-- pg_dump: ${pgError}
-- Prisma SQL: ${sqlError}

SELECT 'Utiliser la sauvegarde JSON comme alternative' as recommendation;`;

        await writeFile(dumpPath, instructionScript);
        console.log("‚ö†Ô∏è Fichier d'instructions cr√©√© (double √©chec)");
        
        // Calculer les stats m√™me en cas d'√©chec
        dbStats = {
          users: 0,
          places: 0,
          events: 0,
          posts: 0,
          newsletterSubscribers: 0,
          abcMembers: 0,
          totalRecords: 0,
          error: "√âchec g√©n√©ration SQL et pg_dump"
        };
      }
    }

    // Cr√©er un fichier de m√©tadonn√©es pour ce dump
    const metadataPath = join(backupDir, "database-backup-info.json");
    const dumpMetadata = {
      exportDate: timestamp,
      exportedBy: {
        id: session.user.id,
        name: session.user.name,
        email: session.user.email
      },
      database: {
        host: dbConfig.host,
        port: dbConfig.port,
        database: dbConfig.database,
        username: dbConfig.username
      },
      files: {
        sqlDump: dumpFileName,
        metadata: "database-backup-info.json"
      },
      method: usedPgDump ? "pg_dump" : "prisma_sql_generator",
      instructions: usedPgDump 
        ? [
            "1. Cr√©er une nouvelle base PostgreSQL",
            "2. Restaurer avec: psql -h host -U username -d database < " + dumpFileName,
            "3. Ou utiliser pnpm db:push + API restore avec JSON",
            "4. V√©rifier les variables d'environnement",
            "5. Restaurer les fichiers uploads s√©par√©ment"
          ]
        : [
            "1. Cr√©er une nouvelle base PostgreSQL", 
            "2. Restaurer avec: psql -d database < " + dumpFileName,
            "3. G√©n√©rer Prisma: pnpm db:generate",
            "4. V√©rifier l'application: pnpm type-check && pnpm dev",
            "5. Restaurer les fichiers uploads s√©par√©ment"
          ]
    };

    await writeFile(metadataPath, JSON.stringify(dumpMetadata, null, 2));

    // Statistiques de la base de donn√©es (si pas d√©j√† calcul√©es)
    if (Object.keys(dbStats).length === 0) {
      dbStats = {
        users: await prisma.user.count(),
        places: await prisma.place.count(),
        events: await prisma.event.count(),
        posts: await prisma.post.count(),
        newsletterSubscribers: await prisma.newsletterSubscriber.count(),
        abcMembers: await prisma.abcMember.count(),
      };
    }

    console.log("üìä Statistiques de la base:", dbStats);

    return NextResponse.json({
      success: true,
      message: usedPgDump 
        ? "Sauvegarde PostgreSQL termin√©e avec succ√®s (pg_dump)"
        : "Sauvegarde PostgreSQL termin√©e avec succ√®s (Prisma SQL Generator)",
      details: {
        method: usedPgDump ? "pg_dump" : "prisma_sql_generator",
        dumpFile: dumpPath,
        metadataFile: metadataPath,
        backupDate: timestamp,
        databaseStats: dbStats,
        exportedBy: session.user.email,
        instructions: dumpMetadata.instructions,
        tablesCount: usedPgDump ? "Toutes (pg_dump)" : `${Object.keys(dbStats).length - 1} tables`
      }
    });

  } catch (error) {
    console.error("‚ùå Erreur lors du dump PostgreSQL:", error);
    return NextResponse.json(
      { error: "Erreur interne du serveur lors du dump base de donn√©es" }, 
      { status: 500 }
    );
  }
}